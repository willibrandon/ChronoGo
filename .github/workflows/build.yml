name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ['1.21', '1.22']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Set TAR_OPTIONS to prevent "Cannot open: File exists" errors
    - name: Configure tar options
      run: echo "TAR_OPTIONS=--warning=no-unknown-keyword --warning=no-existing-file --warning=no-file-changed" >> $GITHUB_ENV
      if: runner.os == 'macOS' || runner.os == 'Linux'

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
        cache: true
        cache-dependency-path: ""

    - name: Install golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --out-format=colored-line-number

    - name: Run linters
      run: golangci-lint run ./...

    - name: Build
      run: go build -v -trimpath ./cmd/chrono

    - name: Install Delve debugger
      run: go install github.com/go-delve/delve/cmd/dlv@latest

    - name: Test
      run: go test -v ./...

  release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Set TAR_OPTIONS to prevent "Cannot open: File exists" errors
      - name: Configure tar options
        run: echo "TAR_OPTIONS=--warning=no-unknown-keyword --warning=no-existing-file --warning=no-file-changed" >> $GITHUB_ENV
        if: runner.os == 'macOS' || runner.os == 'Linux'

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          cache: true
          cache-dependency-path: ""

      - name: Build binaries for multiple platforms
        run: |
          mkdir -p dist
          GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o dist/chrono-linux-amd64 ./cmd/chrono
          GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o dist/chrono-windows-amd64.exe ./cmd/chrono
          GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o dist/chrono-darwin-amd64 ./cmd/chrono
          GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o dist/chrono-darwin-arm64 ./cmd/chrono

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/chrono-linux-amd64
            dist/chrono-windows-amd64.exe
            dist/chrono-darwin-amd64
            dist/chrono-darwin-arm64
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 